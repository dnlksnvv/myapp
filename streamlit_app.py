import streamlit as st
import pandas as pd
import requests

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π CSS –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –±–æ–∫–æ–≤–æ–≥–æ –º–µ–Ω—é
custom_css = """
<style>
/* –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–æ–∫ –∫–∞–∫ –∫–Ω–æ–ø–æ–∫ */
.stRadio > div {
    display: flex;
    flex-direction: column;
}

.stRadio > div > label {
    background-color: #4e73df; /* –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –∫–Ω–æ–ø–∫–∏ */
    color: white; /* –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ */
    border-radius: 20px; /* –ó–∞–∫—Ä—É–≥–ª–µ–Ω–∏–µ —É–≥–ª–æ–≤ */
    padding: 10px 15px; /* –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –æ—Ç—Å—Ç—É–ø */
    margin: 5px 0; /* –û—Ç—Å—Ç—É–ø—ã –º–µ–∂–¥—É –∫–Ω–æ–ø–∫–∞–º–∏ */
    border: 1px solid #4e73df; /* –ì—Ä–∞–Ω–∏—Ü–∞ –∫–Ω–æ–ø–∫–∏ */
    cursor: pointer; /* –ö—É—Ä—Å–æ—Ä –≤ –≤–∏–¥–µ —É–∫–∞–∑–∞—Ç–µ–ª—è */
}

.stRadio > div > label:hover {
    background-color: #5a5c69; /* –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ */
    border-color: #5a5c69; /* –¶–≤–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ */
}

/* –°—Ç–∏–ª—å –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–∫–æ–≥–¥–∞ –æ–ø—Ü–∏—è –≤—ã–±—Ä–∞–Ω–∞) */
.stRadio > div > label > div:first-child {
    display: none;
}

.stRadio > div > label > div:last-child {
    color: white !important;
}
</style>
"""

st.markdown(custom_css, unsafe_allow_html=True)

# –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –±–æ–∫–æ–≤–æ–≥–æ –º–µ–Ω—é
st.sidebar.title("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
st.sidebar.markdown("---")  # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON –ø–æ URL
def get_json_data(url):
    try:
        response = requests.get(url)
        response.raise_for_status()  # –í—ã–∑–æ–≤–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ 4xx/5xx
        return response.json()
    except Exception as e:
        st.sidebar.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ {url}. –û—à–∏–±–∫–∞: {e}")
        return None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —Å –¥–∞–Ω–Ω—ã–º–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
def display_device_table(data1, data2):
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Å—Ç—ã—Ö DataFrame
    df_devices1 = pd.DataFrame()
    df_devices2 = pd.DataFrame()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞, –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
    if data1 is not None:
        devices1 = data1.get('device_list', [])
        df_devices1 = pd.DataFrame(devices1)
        if not df_devices1.empty:
            df_devices1['last_iterrate'] = pd.to_numeric(df_devices1['last_iterrate'], errors='coerce').fillna(0).astype(int)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤—Ç–æ—Ä–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞, –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
    if data2 is not None:
        devices2 = [data2]  # –í—Ç–æ—Ä–æ–π JSON –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç
        df_devices2 = pd.DataFrame(devices2)
        df_devices2 = df_devices2.drop(columns=['average'], errors='ignore')

    # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ DataFrame, –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –Ω–µ –ø—É—Å—Ç–æ–π
    if not df_devices1.empty or not df_devices2.empty:
        df_devices1.rename(columns={'label': 'Device', 'last_iterrate': 'Iterrate', 'solutions': 'Solutions'}, inplace=True, errors='ignore')
        df_devices2.rename(columns={'label': 'Device', 'last_iterrate': 'Iterrate', 'solutions': 'Solutions'}, inplace=True, errors='ignore')
        df_combined = pd.concat([df_devices1, df_devices2], ignore_index=True)
        st.table(df_combined)
    else:
        st.write("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö.")






# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def main_page():
    st.header("–ì–õ–ê–í–ù–ê–Ø –°–¢–†–ê–ù–ò–¶–ê")
    st.markdown("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!")

def mining_page():
    st.title('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ú–∞–π–Ω–∏–Ω–≥–µ')

    # URL —Å –¥–∞–Ω–Ω—ã–º–∏ JSON
    url1 = "https://pooltemp.qubic.solutions/info?miner=QCBHVTJYNBIEPAXEUJJLNZJONVACFJXTMRTZVIPXKFNLCPGYTUMSWUVAJWFG&list=true"
    url2 = "http://188.235.1.241/hive/qubic/qubic.json"

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–µ—Ä–≤–æ–≥–æ JSON —Ñ–∞–π–ª–∞
    json_data1 = get_json_data(url1)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤—Ç–æ—Ä–æ–≥–æ JSON —Ñ–∞–π–ª–∞
    json_data2 = get_json_data(url2)

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    display_device_table(json_data1, json_data2)

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    if st.button('–û–±–Ω–æ–≤–∏—Ç—å'):
        st.experimental_rerun()  # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç –≤–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Streamlit, –æ–±–Ω–æ–≤–∏–≤ –¥–∞–Ω–Ω—ã–µ


# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
page = st.sidebar.radio(
    "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É:",
    ("–ì–ª–∞–≤–Ω–∞—è", "–ú–∞–π–Ω–∏–Ω–≥"),
    format_func=lambda x: "üè† –ì–ª–∞–≤–Ω–∞—è" if x == "–ì–ª–∞–≤–Ω–∞—è" else "‚õè –ú–∞–π–Ω–∏–Ω–≥"
)

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
if page == "–ì–ª–∞–≤–Ω–∞—è":
    main_page()
elif page == "–ú–∞–π–Ω–∏–Ω–≥":
    mining_page()

# –î–æ–±–∞–≤–∏–º –Ω–∏–∂–Ω–∏–π –∫–æ–ª–æ–Ω—Ç–∏—Ç—É–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
st.sidebar.markdown("---")
st.sidebar.info("Streamlit App v1.0")

